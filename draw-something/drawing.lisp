;;  drawing.lisp - Drawing around shapes.;;  Copyright (C) 2004  Rhea Myers rhea@myers.studio;;;;  This program is free software; you can redistribute it and/or modify;;  it under the terms of the GNU General Public License as published by;;  the Free Software Foundation; either version 2 of the License, or;;  (at your option) any later version.;;;;  This program is distributed in the hope that it will be useful,;;  but WITHOUT ANY WARRANTY; without even the implied warranty of;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the;;  GNU General Public License for more details.;;;;  You should have received a copy of the GNU General Public License;;  along with this program; if not, write to the Free Software;;  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA(defclass hand ()  ((location :accessor location 	     :initform (make-instance 'point) 	     :initarg :location	     :documentation "The current location of the hand.")  (direction :accessor direction	     :initform 0.0 	     :initarg :direction	     :documentation "The current heading of the hand, in radians anticlockwise.")  (pen-down :accessor pen-down 	    :initform t	    :initarg :pen-down	    :documentation "Whether the pen is in contact with the paper.")  (speed :accessor speed	 :initform 1.0	 :initarg :speed	 :documentation "The current speed the hand is moving at.")  (hand-distance :accessor hand-distance		 :initform 2.0		 :initarg :distance		 :documentation "The distance the hand should be from the skeletal (quide) shape it is drawing around.")  (distance-fuzz :accessor distance-fuzz		 :initform 0.5		 :initarg :distance-fuzz		 :documentation "How far the hand can drift from the distance it should be from the skeletal (guide) shape.")  (turn-step :accessor turn-step 	     :initform 0.01	     :initarg :turn-step	     :documentation "How far the hand turns at a time."))  (:documentation "A drawing hand, based on the classic computer science 'turtle'."))(defmethod turn ((tt hand) delta)  "Turn the hand anticlockwise the given amount in radians."  (setf (direction tt) (+ (direction tt) delta)))(defmethod turn-left ((tt hand) delta)  "Turn the hand left by the given amount in degrees,"  (turn tt (- delta)))(defmethod turn-right ((tt hand) delta)  "Turn the hand right by the given amount in degrees,"  (turn tt delta))(defmethod move-forward ((tt hand) distance)  "Move the hand forward the given distance at the hand's current angle."  (setf (location tt) (next-point tt distance)))(defmethod move-backward ((tt hand) distance)  "Move the hand backward the given distance at the hand's current angle."  (move-forward tt (- distance)))(defmethod next-point ((tt hand) distance)  "Calculate the next point the hand would move forward to, but don't move the hand to it."  (let ((new-x (+ (x (location tt)) (* distance (sin (direction tt)))))	(new-y (+ (y (location tt)) (* distance (cos (direction tt))))))    (make-instance 'point :x new-x :y new-y)))(defmethod draw-around ((poly polyline) (han hand))  "Draw around a polygon using a hand."  (let* ((the-hand (start-drawing poly han))	 (first-point (location han))	 (sketch (list first-point)))    ;;Make the rest, finishing when < step from the original point    (loop     (let ((next-point (draw-step poly the-hand)))       (setf sketch (cons next-point sketch))       ;; If the list is longer than two segments (1.2.nil)       ;; And the current point is passing close to the first point       (when (and (> (length sketch) 2)		  (< (distance next-point first-point) (speed han)))	 ;; Close the path...	 ;;REVISITME: This is too perfect...	 (setf sketch (cons first-point sketch))	 ;; Returns from the enclosing block, not the function!	 (return nil))))  sketch))(defmethod start-drawing ((poly polyline) (han hand))  "Start the drawing turtle just above the top left point of the polygon."  (let* ((p1 (highest-leftmost-point (points poly)))	 (start (make-instance 'point 			       :x (x p1) 			       :y (+ (y p1)  (hand-distance han)))))    (setf (location han) start)    han))(defmethod draw-step ((poly polyline) (han hand))  "Find the next point forward along the drawn outline of the shape."  (let* ((next-point-straight (next-point han (speed han)))	 (next-point-distance (distance next-point-straight poly))	 (distance-error (abs (- (hand-distance han) next-point-distance))))    (when (> distance-error (distance-fuzz han))      (when (< next-point-distance (hand-distance han))	(while (< (distance (next-point han (speed han)) poly)		  (hand-distance han))	  (turn-left han (turn-step han))))      (when (> next-point-distance (hand-distance han))	(while (> (distance (next-point han (speed han)) poly)		  (hand-distance han))	  (turn-right han (turn-step han)))))    (move-forward han (speed han))    ;(format t "~F ~F lineto~%" (x (location han)) (y (location han)))    (location han)));(test; (let* ((a (make-instance 'point :x 0 :y 0));	(b (make-instance 'point :x 0 :y 10));	(c (make-instance 'point :x 10 :y 10));	(d (make-instance 'point :x 10 :y 0));	(hull (make-instance 'polyline :points (list d c b a)));	(han (start-drawing hull (make-instance 'hand))));   (draw-step hull han)))